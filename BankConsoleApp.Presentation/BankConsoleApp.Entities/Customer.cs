using BankConsoleApp.Entities.Contracts;
using BankConsoleApp.Exceptions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankConsoleApp.Entities
{

    /// <summary>
    /// Represents Customer of the bank 
    /// </summary>
    public class Customer : ICustomer, ICloneable
    {
        private string _Name;
        private long _CustomerCode;
        private string _Mobile;
        private string _ZipCode;

        #region AutoGenerated Properties
        /// <summary>
        /// Guid of Customer for unique representation
        /// </summary>
        public Guid Id { get; set; } = Guid.NewGuid();

        /// <summary>
        /// Auto-generated customer code
        /// </summary>
        
        public long CustomerCode {
            get => _CustomerCode;
            set
            {
                if(value > 0)
                {
                    _CustomerCode = value;
                }
                else
                {
                    throw new CustomerException("Customer Code must be positive value only.");
                }
            } 
        }

        /// <summary>
        /// Customer Username
        /// </summary>
        public string UserName { get; set; }

        /// <summary>
        /// Customer account Password
        /// </summary>
        public string Password { get; set; }

        /// <summary>
        /// Customer Name
        /// </summary>
        public string Name
        {
            get => _Name;
            set
            {
                if(!string.IsNullOrEmpty(value) && value.Length <= 30)
                {
                    _Name = value;
                }
                else
                {
                    throw new CustomerException("Name should not contain more than 30 chars & should not be null");
                }
            }
        }

        /// <summary>
        /// Customer Address -  Enter street
        /// </summary>
        public string Address { get; set; }

        /// <summary>
        /// City
        /// </summary>
        public string City { get; set; }

        /// <summary>
        /// City Zipcode
        /// </summary>
        public string ZipCode {
            get => _ZipCode;
            set
            {
                if (value.Length != 6 || !int.TryParse(value, out int dummy))
                {
                    throw new CustomerException("ZipCode must be valid");
                }
                else
                {
                    _ZipCode = value;
                }
            }
        }

        /// <summary>
        /// Customer Mobile number - 10 digits
        /// </summary>
        public string Mobile {
            get => _Mobile;
            set{
                if (value.Length != 10 || !int.TryParse(value, out int dummy))
                {
                    throw new CustomerException("Mobile number must be valid with 10 digits only.");
                }
                else
                {
                    _Mobile = value;
                }
            } 
        }

        public DateTime DateOfBirth { get; set; }
        #endregion

        #region Methods
        public object Clone()
        {
            return new Customer() 
            {   
                Id = this.Id, 
                Name = this.Name, 
                CustomerCode = this.CustomerCode,
                Address = this.Address,
                City = this.City,
                ZipCode = this.ZipCode,
                Mobile = this.Mobile,
                DateOfBirth = this.DateOfBirth,

            };
        }
        #endregion

    }
}
